/* Plugin generated by AMXX-Studio */

#include < amxmodx >
#include < amxmisc >
#include < hamsandwich >
#include < fakemeta >
#include < engine >

#define PLUGIN "Sprint Minecraft"
#define VERSION "1.0"
#define AUTHOR "DarkGL"

#define MAX 32

new const Float:fWeaponsSpeed[ ]	=	{
	000.0,
	250.0, 000.0, 260.0, 250.0, 240.0, 
	250.0, 250.0, 240.0, 250.0, 250.0,                
	250.0, 250.0, 210.0, 240.0, 240.0,    
	250.0, 250.0, 210.0, 250.0, 220.0,              
	230.0, 230.0, 250.0, 210.0, 250.0,            
	250.0, 235.0, 221.0, 250.0, 245.0 
};

enum sprintState {
	SPRINT_OFF ,
	SPRINT_FIRST_FORWARD ,
	SPRINT_NOT_FORWARD ,
	SPRINT_ON
}

new sprintState:	ePlayerState[ MAX + 1 ];	
new Float:			fTimePlayer[ MAX + 1 ];
new Float:			fToFov[ MAX + 1 ];
new Float: 			fTimeFov[ MAX + 1 ];
new Float:			fFovLastUpdate[ MAX + 1 ];
new Float:			fCurrentFov[ MAX + 1 ];

new 	pCvarTimeDelay		=	0 ,
		pCvarSprintSpeed	=	0 ,
		pCvarChance			=	0 ,
		pCvarTimeFov		=	0;

new msgFOV;

public plugin_init() {
	register_plugin( PLUGIN , VERSION , AUTHOR );
	
	RegisterHam( Ham_Killed , "player" , "fwKilled" , 1 );
	RegisterHam( Ham_Player_PreThink , "player" , "fwPreThink" );
	
	register_event( "CurWeapon" , "CurWeapon" , "be" , "1=1" );
	
	pCvarTimeDelay		=	register_cvar( "sprintMinecraft_delay" , "0.5" );
	pCvarSprintSpeed	=	register_cvar( "sprintMinecraft_speed" , "310.0" );
	pCvarChance			=	register_cvar( "sprintMinecraft_change" , "1" );
	pCvarTimeFov		=	register_cvar( "sprintMinecraft_fovtime" , "0.2" );
	
	msgFOV 				= 	get_user_msgid( "SetFOV" );
}

public client_connect( id ){
	cleanInformation( id );
	fTimeFov[ id ]		=	0.0;
}

public client_disconnect( id ){
	cleanInformation( id );
	fTimeFov[ id ]		=	0.0;
}

public fwPreThink( id ){
	if( !is_user_alive( id ) || pev( id , pev_maxspeed ) == 1.0 ){ //in freezetime player have 1.0 maxspeed
		return PLUGIN_CONTINUE;
	}
	
	if( fTimeFov[ id ] != 0.0 ){
		if( fTimeFov[ id ] < get_gametime( ) ){
			fTimeFov[ id ]	=	0.0;
		}
		else{		
			fCurrentFov[ id ]	+=	( get_gametime( ) - fFovLastUpdate[ id ] ) * fToFov[ id ];
			
			set_pev( id , pev_fov , fCurrentFov[ id ] );
			
			message_begin( MSG_ONE , msgFOV, { 0 , 0 , 0 }, id );
			write_byte( floatround( fCurrentFov[ id ] ) );
			message_end( );
			
			fFovLastUpdate[ id ]	=	get_gametime( );
		}
	}
	
	new iButton		=	pev( id , pev_button );
	new iOldButton	=	pev( id , pev_oldbuttons );
	
	switch( ePlayerState[ id ] ){
		case SPRINT_ON : {
			if( !( iButton & IN_FORWARD ) ){
				sprintOff( id );
			}
		}
		case SPRINT_OFF : {
			if( iButton & IN_FORWARD && !( iOldButton & IN_FORWARD ) ){
				fTimePlayer[ id ]	=	get_gametime();
				ePlayerState[ id ]	=	SPRINT_FIRST_FORWARD;
			}
		}
		case SPRINT_FIRST_FORWARD : {
			if( !checkTime( id ) ){
				cleanInformation( id );
				
				return PLUGIN_CONTINUE;
			}
			
			if( !( iButton & IN_FORWARD ) ){
				ePlayerState[ id ]	=	SPRINT_NOT_FORWARD;
			}
		}
		case SPRINT_NOT_FORWARD : {
			if( !checkTime( id ) ){
				cleanInformation( id );
				
				return PLUGIN_CONTINUE;
			}
			
			if( iButton & IN_FORWARD ){
				if( random_num( 0 , get_pcvar_num( pCvarChance ) ) != 0 ){
					cleanInformation( id ) ;
				}
				else{
					sprintOn( id );
				}
			}
		}
	}
	
	return PLUGIN_CONTINUE;
}

moveTo( id , Float: fFov , Float: fTime ){
	fCurrentFov[ id ]		=	float( pev( id , pev_fov ) );
	
	fTimeFov[ id ]			=	get_gametime( ) + fTime;
	fToFov[ id ]			=	( fFov - fCurrentFov[ id ] ) / fTime;
	
	fFovLastUpdate[ id ]	=	get_gametime( );
}

cleanInformation( id ){
	fTimePlayer[ id ]	=	0.0;
	ePlayerState[ id ]	=	SPRINT_OFF;
}

bool: checkTime( id ){
	return ( get_gametime() - fTimePlayer[ id ] <= get_pcvar_float( pCvarTimeDelay ) );
}

sprintOn( id ){
	ePlayerState[ id ]	=	SPRINT_ON;
	fTimePlayer[ id ]	=	0.0;
	
	set_pev( id , pev_maxspeed , get_pcvar_float( pCvarSprintSpeed ) );
	
	engfunc( EngFunc_SetClientMaxspeed , id , get_pcvar_float( pCvarSprintSpeed ) );
	
	moveTo( id , 100.0 , get_pcvar_float( pCvarTimeFov ) );
}

sprintOff( id ){
	ePlayerState[ id ]	=	SPRINT_OFF;
	fTimePlayer[ id ]	=	0.0;
	
	set_pev( id , pev_maxspeed , fWeaponsSpeed[ get_user_weapon( id ) ] );
	
	if( is_user_alive( id ) ){
		engfunc( EngFunc_SetClientMaxspeed , id , fWeaponsSpeed[ get_user_weapon( id ) ] );
	}
	
	moveTo( id , 90.0 , get_pcvar_float( pCvarTimeFov ) );
}

public fwKilled( id ){
	if( is_user_alive( id ) ){
		return HAM_IGNORED;
	}
	
	sprintOff( id )
	
	return HAM_IGNORED;
}

public CurWeapon( id ){
	if( !is_user_alive( id ) || ePlayerState[ id ] != SPRINT_ON ){
		return PLUGIN_CONTINUE;
	}
	
	set_pev( id , pev_maxspeed , get_pcvar_float( pCvarSprintSpeed ) );
	
	return PLUGIN_CONTINUE;
}